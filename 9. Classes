class tank:
    def __init__(self, name, country):
        self.name = name
        self.country = country

    def identify(self):
        print(f"{self.name} is a tank from {self.country}")

    def ride(self):
        print(f"{self.name} is moving.")

    def shoot(self):
        print(f"{self.name} is shooting.")

abrams = tank("M1A2 Abrams", "America")

print(f"{abrams.name}")
print(f"{abrams.country}")
abrams.shoot()
abrams.ride()

9.1: Restaurant.
class restaurant:
    def __init__(self, name, cuisine):
        self.name = name
        self. cuisine = cuisine

    def describe_restaurant(self):
        print(f"{self.name} is a/an {self.cuisine} restaurant.")

    def open_restaurant(self):
        print(f"{self.name} is opened.")

phoOne = restaurant("Pho One 24", "Vietnamese")

print(phoOne.name)
print(phoOne.cuisine)

phoOne.describe_restaurant()
phoOne.open_restaurant()


9.2: Three Restaurants.
class restaurant:
    def __init__(self, name, cuisine):
        self.name = name
        self. cuisine = cuisine

    def describe_restaurant(self):
        print(f"{self.name} is a/an {self.cuisine} restaurant.")

    def open_restaurant(self):
        print(f"{self.name} is opened.")

phoOne = restaurant("Pho One 24", "Vietnamese")
seoul = restaurant("Seoul", "Korean")
tanpopo = restaurant("Tanpopo Ramen & Sushi", "Japanese")

print(f"\n{phoOne.name}")
print(f"{phoOne.cuisine}")
phoOne.describe_restaurant()
phoOne.open_restaurant()

print(f"\n{seoul.name}")
print(f"{seoul.cuisine}")
seoul.describe_restaurant()
seoul.open_restaurant()

print(f"\n{tanpopo.name}")
print(f"{tanpopo.cuisine}")
tanpopo.describe_restaurant()
tanpopo.open_restaurant()

9.3: Users.
class users:
    def __init__(self, first_name, last_name, age, location):
        self.first_name = first_name
        self.last_name = last_name
        self.age = age
        self.location = location

    def describe_user(self):
        full_name = f"{self.first_name} {self.last_name}"
        print(f"\n{full_name}")
        print(f"User's age: {self.age}.")
        print(f"The user lives in {self.location}.")

    def greet(self):
        print(f"Hello {self.first_name},welcome to the program!")

"""DATA ABOUT THE FIRST USER"""
app00jul = users("Jul", "Vu", "18", "Wisconsin")

print(app00jul.first_name)
print(app00jul.last_name)
print(app00jul.age)
print(app00jul.location)

app00jul.describe_user()
app00jul.greet()

9.4: Number Served.
class restaurant:
    def __init__(self, name, cuisine):
        self.name = name
        self. cuisine = cuisine
        self.served = 0

    def describe_restaurant(self):
        print(f"{self.name} is a/an {self.cuisine} restaurant.")

    def open_restaurant(self):
        print(f"{self.name} is opened.")

    def set_number_served(self, served):
        if served >= self.served:
            self.served = served
            print(f"We have served extra {self.served} people.")
        else:
            print("You cannot roll back the number of served customers.")

    def increment_number_served(self, served):
        self.served += served

    def read_served(self):
        print(f"The total number of servings today is {self.served}.")

phoOne24 = restaurant("Pho One 24", "Vietnamese")

phoOne24.describe_restaurant()
phoOne24.open_restaurant()

phoOne24.set_number_served(12)
phoOne24.read_served()

phoOne24.increment_number_served(30)
phoOne24.read_served()

9.5: Login Attempts.
class users:
    def __init__(self, first_name, last_name, age, location):
        self.first_name = first_name
        self.last_name = last_name
        self.age = age
        self.location = location
        self.login_attempt = 0

    def describe_user(self):
        full_name = f"{self.first_name} {self.last_name}"
        print(f"\n{full_name}")
        print(f"User's age: {self.age}.")
        print(f"The user lives in {self.location}.")

    def greet(self):
        print(f"Hello {self.first_name},welcome to the program!")

    def increment_login_attempt(self):
        self.login_attempt += 1
        print(f"Your current login attempts are {self.login_attempt}")

    def reset_login_attempt(self):
        self.login_attempt = 0
        print(f"Your login attempt has been reset {self.login_attempt}.")

"""DATA ABOUT THE FIRST USER"""
app00jul = users("Jul", "Vu", "18", "Wisconsin")
print(app00jul.first_name)
print(app00jul.last_name)
print(app00jul.age)
print(app00jul.location)

app00jul.describe_user()
app00jul.greet()

app00jul.increment_login_attempt()
app00jul.increment_login_attempt()
app00jul.reset_login_attempt()

9.6: Ince Cream Stand.
class Restaurant:
    def __init__(self, name, cuisine):
        self.name = name
        self. cuisine = cuisine
        self.served = 0

    def describe_restaurant(self):
        print(f"{self.name} is a/an {self.cuisine} restaurant.")

    def open_restaurant(self):
        print(f"{self.name} is opened.")

    def set_number_served(self, served):
        if served >= self.served:
            self.served = served
            print(f"We have served extra {self.served} people.")
        else:
            print("You cannot roll back the number of served customers.")

    def increment_number_served(self, served):
        self.served += served

    def read_served(self):
        print(f"The total number of servings today is {self.served}.")

class IceCreamStand(Restaurant):
    def __init__(self, name, cuisine):
        super().__init__(name, cuisine)

    def favor(self):
        favors =  ["Vanilla", "Chocolate",
                  "Mint", "Watermelon",
                  "Banana", "Strawberry"]
        print("\nHere are all the favor in the Ice Cream Stand:")
        for favor in favors:
            print(f"\t{favor}")

CheesecakeFactory = IceCreamStand("Cheescake Factory", "Cheesecake")
CheesecakeFactory.describe_restaurant()
CheesecakeFactory.favor()

9.7: Admin.
class Users:
    def __init__(self, first_name, last_name, age, location):
        self.first_name = first_name
        self.last_name = last_name
        self.age = age
        self.location = location
        self.login_attempt = 0

    def describe_user(self):
        full_name = f"{self.first_name} {self.last_name}"
        print(f"\n{full_name}")
        print(f"User's age: {self.age}.")
        print(f"The user lives in {self.location}.")

    def greet(self):
        print(f"Hello {self.first_name},welcome to the program!")

    def increment_login_attempt(self):
        self.login_attempt += 1
        print(f"Your current login attempts are {self.login_attempt}")

    def reset_login_attempt(self):
        self.login_attempt = 0
        print(f"Your login attempt has been reset {self.login_attempt}.")

class Admin(Users):
    def __init__(self, first_name, last_name, age, location):
        super().__init__(first_name, last_name, age, location)
        self.privileges = ["can add post", "can delete post",
                           "can see the list of user", "can ban post",
                           "add new users", "remove users"]


    def show_privileges(self):
        print("Here are the Admin's privileges:")
        for privilege in self.privileges:
            print(f"\t- {privilege.title()}")

"""DATA ABOUT THE FIRST USER"""
app00jul = Admin("Julian", "Vu", "18", "Milwaukee")
app00jul.show_privileges()

9.8: Privileges.
class Users:
    def __init__(self, first_name, last_name, age, location):
        self.first_name = first_name
        self.last_name = last_name
        self.age = age
        self.location = location
        self.login_attempt = 0

    def describe_user(self):
        full_name = f"{self.first_name} {self.last_name}"
        print(f"\n{full_name}")
        print(f"User's age: {self.age}.")
        print(f"The user lives in {self.location}.")

    def greet(self):
        print(f"Hello {self.first_name},welcome to the program!")

    def increment_login_attempt(self):
        self.login_attempt += 1
        print(f"Your current login attempts are {self.login_attempt}")

    def reset_login_attempt(self):
        self.login_attempt = 0
        print(f"Your login attempt has been reset {self.login_attempt}.")

class Privileges:
    def __init__(self):
        self.privileges = ["can add post", "can delete post",
                           "can see the list of user", "can ban post",
                           "add new users", "remove users"]
    def show_privileges(self):
        print("Here are the Admin's privileges:")
        for privilege in self.privileges:
            print(f"\t- {privilege.title()}")

class Admin(Users):
    def __init__(self, first_name, last_name, age, location):
        super().__init__(first_name, last_name, age, location)
        self.privileges = Privileges()


"""DATA ABOUT THE FIRST USER"""
app00jul = Admin("Julian", "Vu", "18", "Milwaukee")
app00jul.privileges.show_privileges()

9.9: Battery Upgrade.
class Car:
    def __init__(self, make, model, year):
        self.make = make
        self.model = model
        self.year = year
        self.odometer_reading = 0

    def get_descriptive_name(self):
        long_name = f"{self.year} {self.make} {self.model}"
        return long_name.title()

    def read_odometer(self):
        print(f"This car has {self.odometer_reading} miles on it.")

    def update_odometer(self, mileage):
        if mileage >= self.odometer_reading:
            self.odometer_reading = mileage
        else:
            print("You cannot roll back an odometer!")

    def increment_odometer(self, miles):
        self.odometer_reading += miles

class Battery():
    def __init__(self, battery_size=75):
        self.battery_size = battery_size

    def describe_battery(self):
        print(f"This car has a {self.battery_size}-kWh battery.")

    def get_range(self):
        if self.battery_size == 75:
            car_range = 260
        elif self.battery_size == 100:
            car_range = 315

        print(f"This car can go about {car_range} miles on a full charge.")

    def update_battery(self):
        if self.battery_size < 100:
            self.battery_size = 100

class ElectricCar(Car):
    def __init__(self, make, model, year):
        super().__init__(make, model, year)
        self.battery_size = Battery()

    def describe_battery(self):
        print(f"This car has a {self.battery_size}-kWh battery.")



my_tesla = ElectricCar("telsa", "model e", 2020)

print(my_tesla.get_descriptive_name())
my_tesla.battery_size.describe_battery()
my_tesla.battery_size.get_range()

my_tesla.battery_size.update_battery()

my_tesla.battery_size.describe_battery()
my_tesla.battery_size.get_range()

9.10: Imported Restaurant.
***Classes*** 
class Restaurant:
    def __init__(self, name, cuisine):
        self.name = name
        self. cuisine = cuisine
        self.served = 0

    def describe_restaurant(self):
        print(f"{self.name} is a/an {self.cuisine} restaurant.")

    def open_restaurant(self):
        print(f"{self.name} is opened.")

    def set_number_served(self, served):
        if served >= self.served:
            self.served = served
            print(f"We have served extra {self.served} people.")
        else:
            print("You cannot roll back the number of served customers.")

    def increment_number_served(self, served):
        self.served += served

    def read_served(self):
        print(f"The total number of servings today is {self.served}.")

***Smaller_classes***
from Classes import Restaurant

class IceCreamStand(Restaurant):
    def __init__(self, name, cuisine):
        super().__init__(name, cuisine)

    def favor(self):
        favors =  ["Vanilla", "Chocolate",
                  "Mint", "Watermelon",
                  "Banana", "Strawberry"]
        print("\nHere are all the favor in the Ice Cream Stand:")
        for favor in favors:
            print(f"\t{favor}")
 
***main***
from Classes import Restaurant
from Smaller_classes import IceCreamStand

CheesecakeFactory = IceCreamStand("Cheescake Factory", "Cheesecake")
CheesecakeFactory.describe_restaurant()
CheesecakeFactory.favor()

9.11: Imported Admin.
***Classes***
class Users:
    def __init__(self, first_name, last_name, age, location):
        self.first_name = first_name
        self.last_name = last_name
        self.age = age
        self.location = location
        self.login_attempt = 0

    def describe_user(self):
        full_name = f"{self.first_name} {self.last_name}"
        print(f"\n{full_name}")
        print(f"User's age: {self.age}.")
        print(f"The user lives in {self.location}.")

    def greet(self):
        print(f"Hello {self.first_name},welcome to the program!")

    def increment_login_attempt(self):
        self.login_attempt += 1
        print(f"Your current login attempts are {self.login_attempt}")

    def reset_login_attempt(self):
        self.login_attempt = 0
        print(f"Your login attempt has been reset {self.login_attempt}.")

class Privileges:
    def __init__(self):
        self.privileges = ["can add post", "can delete post",
                           "can see the list of user", "can ban post",
                           "add new users", "remove users"]
    def show_privileges(self):
        print("Here are the Admin's privileges:")
        for privilege in self.privileges:
            print(f"\t- {privilege.title()}")

class Admin(Users):
    def __init__(self, first_name, last_name, age, location):
        super().__init__(first_name, last_name, age, location)
        self.privileges = Privileges()

***main***
from Classes import Admin, Privileges, Users

"""DATA ABOUT THE FIRST USER"""
app00jul = Admin("Julian", "Vu", "18", "Milwaukee")
app00jul.privileges.show_privileges()

9.12: Multiple Modules.
***Classes***
class Users:
    def __init__(self, first_name, last_name, age, location):
        self.first_name = first_name
        self.last_name = last_name
        self.age = age
        self.location = location
        self.login_attempt = 0

    def describe_user(self):
        full_name = f"{self.first_name} {self.last_name}"
        print(f"\n{full_name}")
        print(f"User's age: {self.age}.")
        print(f"The user lives in {self.location}.")

    def greet(self):
        print(f"Hello {self.first_name},welcome to the program!")

    def increment_login_attempt(self):
        self.login_attempt += 1
        print(f"Your current login attempts are {self.login_attempt}")

    def reset_login_attempt(self):
        self.login_attempt = 0
        print(f"Your login attempt has been reset {self.login_attempt}.")

***Smaller_classes***
from Classes import Users

class Privileges:
    def __init__(self):
        self.privileges = ["can add post", "can delete post",
                           "can see the list of user", "can ban post",
                           "add new users", "remove users"]
    def show_privileges(self):
        print("Here are the Admin's privileges:")
        for privilege in self.privileges:
            print(f"\t- {privilege.title()}")

class Admin(Users):
    def __init__(self, first_name, last_name, age, location):
        super().__init__(first_name, last_name, age, location)
        self.privileges = Privileges()

***main***
from Classes import Users
from Smaller_classes import Admin, Privileges

"""DATA ABOUT THE FIRST USER"""
app00jul = Admin("Julian", "Vu", "18", "Milwaukee")
app00jul.privileges.show_privileges()

9.13: Dice.
from random import randint

class Dice:
    def __init__(self, num_of_roll):
        self.six_side = 0
        self.ten_side = 0
        self.twenty_side = 0
        self.num_of_roll = num_of_roll + 1
        self.rolled = 1

    def roll_dice(self):
        while self.rolled < self.num_of_roll:
            print(f"\nThe number of roll are {self.rolled}.")

            self.six_side = randint(1,6)
            print(f"\tThe 6-sided die rolls a {self.six_side}.")

            self.ten_side = randint(1,10)
            print(f"\tThe 10-sided die rolls a {self.ten_side}")

            self.twenty_side = randint(1,20)
            print(f"\tThe 20-sided die rolls a {self.twenty_side}")

            self.rolled += 1

roll_ten_time = Dice(10)
roll_ten_time.roll_dice()

9.14: Lottery.
from random import choice

class Lottery:
    def __init__(self, data):
        self.ticket_data = [1, 2, 3, 4, 5,
                            6, 7, 8, 9, 0,
                            "D", "E", "J", "W", "N"]
        self.data = data
        self.first = 0
        self.second = 0
        self.third = 0
        self.forth = 0

    def roll_ticket(self):
        self.first = choice(self.ticket_data)
        print(f"The first letter/number is: \t {self.first}")
        self.second = choice(self.ticket_data)
        print(f"The first letter/number is: \t {self.second}")
        self.third = choice(self.ticket_data)
        print(f"The first letter/number is: \t {self.third}")
        self.forth = choice(self.ticket_data)
        print(f"The first letter/number is: \t {self.forth}")

        print("\nThe winning ticket is:")
        print(f"\t{self.first} {self.second} {self.third} {self.forth}")

yeet = Lottery(10)
yeet.roll_ticket() ***FIX THIS TOMORROW

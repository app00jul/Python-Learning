8.1: Message.
def display_message():
    print("I am learning how to use function in Python!")
    
display_message()

8.2: Favorite Book.
def favorite_book(book):
    print(f"One of my favorite books is {book.title()}.")

book = input("Please enter the name of the book you like: ")
favorite_book(book)

8.3: T-Shirt.
def make_shirts(size, message):
    print(f"The size of the shirt will be {size}.")
    print("Message:")
    print(f"\t{message}")
    
size = input("Please enter the size you want: ")
message = input("Please enter the message you want: ")

make_shirts(size, message)

8.4: Large Shirts.
def make_shirts(size, message):
    message = input("Please enter the message you want: ")

    if message == "I love Python":
        print("For this messae, the shirt need to be medium or large.")
        size_option = "If you want to pick the medium size shirt, type 'M'."
        size_option += "\nIf you want to pick the large size shirt, type 'L'."
        size_option += "\nType here: "
        choose = input(size_option)
        if choose.title() == "M":
            size = "Medium"
        elif choose.title() == "L":
            size = "Large"
        print(f"\nThe size of the shirt is {size}.")
        print("The message:")
        print(f"\t{message}")
    else:
        size = input("Please enter the size you want: ")
        print(f"\nThe size of the shirt is {size}.")
        print("The message:")
        print(f"\t{message}")
        
make_shirts(size, message)

8.5: Cities.
def describe_city(city, country):
    print(f"{city.title()} is in {country.title()}.")

describe_city("Hanoi", "Vietnam")
describe_city("Milwaukee", "United States")
describe_city("Tokyo", "Japan")

8.6: City Names.
def city_country(city, country):
    location = {"City" : city, 
                "Country" : country}
    
    city_in_country = f"{location['City']}, {location['Country']}"
    
    return city_in_country

NY = city_country("New York", "United States")
AUK = city_country("Auckland", "New Zealand")
TKY = city_country("Tokyo", "Japan")

print(NY)
print(AUK)
print(TKY)

8.7: Album.
def make_album(artist_name, album_title, number_of_songs = None):
    album = {"Artist" : artist_name,
             "Title" : album_title}
    
    if number_of_songs:
        album["Number of songs"] = number_of_songs
        print(f"\n{album['Title']}:")
        print(f"\tArtist: {album['Artist']}.")
        print(f"\tNumber of songs: {album['Number of songs']}")
    else:
        print(f"\n{album['Title']}:")
        print(f"\tArtist: {album['Artist']}.")
    
    return album

make_album("Hek", "Wub_wub", 13)
make_album("H", "Wad")

8.8: User Album.
def user_album(artist_name, album_title, number = None):
    album = {"Artist" : artist_name,
             "Title" : album_title}
    
    if number:
        album["Number of songs"] = number
        album_info = f"\nTitle: {album['Title']}.title():"
        album_info += f"\nArtitst: {album['Artist']}.title()"
        album_info += f"\nNumber of songs: {album['Number of songs']}.title()"
    else:
        album_info = f"\nTitle: {album['Title']}.title():"
        album_info += f"\nArtitst: {album['Artist']}.title()"
        
    return album_info

while True:
    print("\nPlease tell me the following information:")
    print("Please enter 'q' to quit.")
    
    title = input("Album title: ")
    if title == 'q':
        break
    
    artist = input("Artist name: ")
    if artist == 'q':
        break
    
    num = input("Number of songs in the album (optional, if so, leave blank): ")
    if num == 'q':
        break
    
    album_data = user_album(artist, title, num)
    print(album_data)

8.9: Message.
messages = ["Hello World", "Hello hello",
            "Yes yes", "Good morning"]

def show_messages(texts):
    for text in texts:
        print(f"\n{text.title()}")
        
show_messages(messages)

8.10: Sending Messages.
messages = ["Hello World", "Hello hello",
            "Yes yes", "Good morning"]

printed_messages = []

def printing_messages(messages, printed_messages):
    while messages:
        printing_message = messages.pop()
        print(f"Printing message: {printing_message}")
        printed_messages.append(printing_message)
        
def finished_messages(printed_messages):
    print("\nThe following messages have been printed:")
    for message in printed_messages:
        print(f"\t{message}")
        
printing_messages(messages, printed_messages)
finished_messages(printed_messages)

8.11: Archived Messages.
messages = ["Hello World", "Hello hello",
            "Yes yes", "Good morning"]

printed_messages = []

def printing_messages(messages, printed_messages):
    while messages:
        printing_message = messages.pop()
        print(f"Printing message: {printing_message}")
        printed_messages.append(printing_message)
        
def finished_messages(printed_messages):
    print("\nThe following messages have been printed:")
    for message in printed_messages:
        print(f"\t{message}")
        
printing_messages(messages, printed_messages)
finished_messages(printed_messages)

print(messages)
print(printed_messages)

8.12: Sandwiches.
def make_sandwich(*toppings):
    print("\nYou ordered the following toppings:")
    for topping in toppings:
        print(f"\t{topping.title()}.")
        
make_sandwich("cheese")
make_sandwich("bacon", "ketchup")
make_sandwich("chicken", "honey mustard", "lectuce")

8.13: User Profile.
def build_profile(first, last, **user_info):
    user_info["first name"] = first
    user_info["last name"] = last
    
    for data, info in user_info.items():
        print(f"\n{data.title()}:")
        print(f"\t{info}.")
    
    return user_info

build_profile("Albert", "Einstein",
              location = "Princeton",
              field = "Physics")

8.14: Cars.
